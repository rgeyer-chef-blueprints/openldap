require 'berkshelf/vagrant'

module Vagrant
  module Provisioners
    class Base
      def cleanup
        # TODO: Use an absolute path, or use something that assures we're gonna delete the shim directory.
        FileUtils.rm_rf "rs_vagrant_shim" if File.directory? "rs_vagrant_shim"
      end
    end
  end
end

Vagrant::Config.run do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # The path to the Berksfile to use with Vagrant Berkshelf
  config.berkshelf.berksfile_path = "../Berksfile"

  # An array of symbols representing groups of cookbook described in the Vagrantfile
  # to skip installing and copying to Vagrant's shelf.
  # config.berkshelf.only = []

  # An array of symbols representing groups of cookbook described in the Vagrantfile
  # to skip installing and copying to Vagrant's shelf.
  # config.berkshelf.except = []

  config.vm.host_name = "openldap-consumer"

  config.vm.box = "Berkshelf-CentOS-6.3-x86_64-minimal"
  config.vm.box_url = "https://dl.dropbox.com/u/31081437/Berkshelf-CentOS-6.3-x86_64-minimal.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  config.vm.network :hostonly, "33.33.33.11"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.

  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  # config.vm.forward_port 80, 8080

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"

  config.ssh.max_tries = 40
  config.ssh.timeout   = 120

  config.vm.provision :chef_solo do |chef|
    chef.json = {
       :openldap => {
         :allow_remote => "true",
         :config_admin_cn => "foobarbaz",
         :config_admin_password => "password",
         :database_admin_cn => "admin",
         :database_admin_password => "password",
         :replication_user_password => "password",
         :base_dn => "dc=a,dc=com"
       },
       :cloud => {
         :private_ips => ["127.0.0.1"],
         :public_ips => ["33.33.33.11"]
       },
       :rightscale => {
         :instance_uuid => "auuid",
         :servers => {
           :sketchy => {
             :hostname => "foo.bar.baz"
           }
         }
       },
       :sys_firewall => {
         :enabled => "enabled"
       }
    }

    chef.run_list = [
      #"recipe[logging::default]",
      #"recipe[sys_firewall::default]",
      #"recipe[sys_ntp::default]",
      "recipe[rightscale::setup_server_tags]",
      #"recipe[rightscale::setup_timezone]",
      #"recipe[rightscale::install_tools]",
      #"recipe[block_device::setup_ephemeral]",
      #"recipe[sys::setup_swap]",
      "recipe[openldap::install_openldap]",
      "recipe[openldap::do_create_database]",
      "recipe[openldap::do_initialize_consumer]"
    ]
  end
end
